"""
传参：
python magnetic_orbit.py "FY2B" "2011-01-01 00:00:00" "2011-01-02 10:00:00"
python py文件 卫星类型 开始时间 结束时间
"""

import sys
from chaosmagpy import load_CHAOS_matfile
from chaosmagpy.data_utils import mjd2000
import numpy as np
import glob
import datetime
import pandas as pd
import os
import warnings
warnings.filterwarnings('ignore',category=UserWarning)

pwd_z=os.getcwd()  #主项目路径
pwd_c=sys.path[0]  #我的项目路径
os.chdir(pwd_c)
iniPath='xw.ini'
FILEPATH_CHAOS = glob.glob('data/CHAOS-*.mat')[0]
R_REF = 6371.2  # 地球平均半径

def getB(time, calat, lon, radius):
    # give inputs
    theta = calat
    phi = lon
    radius = radius + R_REF  # radius from altitude in km
    time = time  # time in mjd2000

    # load the CHAOS model
    model = load_CHAOS_matfile(FILEPATH_CHAOS)
    # print(model)

    # print('Computing core field.')
    B_core = model.synth_values_tdep(time, radius, theta, phi)  # 返回随时间变化的径向、余纬、垂直方向地磁分量

    # print('Computing crustal field up to degree 110.')
    B_crust = model.synth_values_static(radius, theta, phi, nmax=110)  # 返回静态内磁场径向、余纬、垂直方向地磁场

    # complete internal contribution
    B_radius_int = B_core[0] + B_crust[0]
    B_theta_int = B_core[1] + B_crust[1]
    B_phi_int = B_core[2] + B_crust[2]

    # print('Computing field due to external sources, incl. induced field: GSM.')
    B_gsm = model.synth_values_gsm(time, radius, theta, phi, source='all')  # 返回远磁层磁场径向、余纬、垂直方向地磁场

    # print('Computing field due to external sources, incl. induced field: SM.')
    B_sm = model.synth_values_sm(time, radius, theta, phi, source='all')  # 返回近磁层磁场径向、余纬、垂直方向地磁场

    # complete external field contribution
    B_radius_ext = B_gsm[0] + B_sm[0]
    B_theta_ext = B_gsm[1] + B_sm[1]
    B_phi_ext = B_gsm[2] + B_sm[2]

    # complete forward computation
    B_radius = B_radius_int + B_radius_ext
    B_theta = B_theta_int + B_theta_ext
    B_phi = B_phi_int + B_phi_ext

    B = np.sqrt(B_radius ** 2 + B_theta ** 2 + B_phi ** 2)
    # B = B.reshape(len(calat), len(lon))
    return B


def out_date(year, day):
    fir_day = datetime.datetime(year, 1, 1)
    zone = datetime.timedelta(days=day - 1)
    return datetime.datetime.strftime(fir_day + zone, "%Y-%m-%d")
def Connect_SQL(iniPath):
    from configparser import ConfigParser
    cfg = ConfigParser()
    cfg.read(iniPath)
    sql_t=dict(cfg.items('sqltype'))['sqltype']
    while sql_t == 'mysql':
        import pymysql
        sql_cfg = dict(cfg.items("mysql"))
        conn = pymysql.connect(  #MySQLdb
            host=sql_cfg['host'],
            port=int(sql_cfg['port']),
            user=sql_cfg['user'],
            passwd=sql_cfg['password'],
            db=sql_cfg['db'],
            charset="utf8")
        cur = conn.cursor()  # 使用cursor()方法创建一个游标对象
        #if cur:
            #print('>>>mysql数据库连接成功<<<')
        break
    while sql_t == 'dmsql':
        import dmPython
        sql_cfg = dict(cfg.items("dmsql"))
        conn = dmPython.connect(
            user=sql_cfg['user'],
            password=sql_cfg['password'],
            server=sql_cfg['server'],
            port=sql_cfg['port'])
        cur = conn.cursor()
        #if cur:
            #print('>>>dmsql数据库连接成功<<<')
        break
    return conn, cur

def main(sat_logo,dt_s,dt_e, batch_size=100000):
    try:
        conn, cur = Connect_SQL(iniPath)
        sql_select = "SELECT TIME,LAT,LON,ALT FROM SEC_SATELLITE_LLA" + " WHERE TIME between '%s' and '%s' and SAT_ID ='%s' " % (dt_s, dt_e,sat_logo)
        data = pd.read_sql(sql_select, conn)

        TIME, ALT, LAT, LON, B, B0, BB0 = [], [], [], [], [], [], []
        for i in range(0, len(data), batch_size):
            dt=data.iloc[i:i + batch_size, 0].values
            lat = data.iloc[i:i + batch_size,1].values
            lon = data.iloc[i:i + batch_size, 2].values
            alt = data.iloc[i:i + batch_size, 3].values
            # dts = np.asarray(dt, dtype=np.unicode_)
            # time = (dts.astype('datetime64[us]') - np.datetime64('2000-01-01', 'us')) / np.timedelta64(1, 'D')
            time = mjd2000(dt)
            calat=90 - lat

            b = getB(time, calat, lon, alt)

            TIME.extend(pd.to_datetime(dt).strftime('%Y-%m-%d %H:%M:%S').tolist())
            ALT.extend(list(alt))
            LAT.extend(list(lat))
            LON.extend(list(lon))
            B.extend(list(np.squeeze(b)))

        # save to output file
        DATA = np.stack([np.array(TIME), np.array(ALT), np.array(LAT), np.array(LON), B], axis=-1)
        DATA=pd.DataFrame(DATA)
        DATA.columns=['时间','高度km','经度deg','纬度deg','磁场强度nT']
        # header = ('t(mjd2000) alt(km) calat(deg) lon(deg) '
        #           'B(nT) B0(nT) BB0')
        # np.savetxt('./out/B_orbit.txt', data, fmt="%f", delimiter=' ', header=header)
        os.chdir(pwd_z)
        return DATA
    except:
        return False

if __name__ == '__main__':

    k=sys.argv[1:]
    a=main(k[0],k[1],k[2])
    print(a)

    # dt_s='2011-01-01 00:00:00'
    # dt_e='2011-01-01 10:00:00'
    # sat_logo='FY2B'
    # # FILEPATH_CHAMP = glob.glob('data/CHAMP_*.mat')[0]
    # main(sat_logo,dt_s,dt_e)
