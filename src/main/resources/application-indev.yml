spring:
  servlet:
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB
  mvc:
    servlet:
      path: /sec
    path-match:
      matching-strategy: ANT_PATH_MATCHER
  datasource:
    driverClassName: dm.jdbc.driver.DmDriver
    url: jdbc:dm://36.138.2.1:5236/SDC?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
    #    url: jdbc:dm://127.0.0.1:5236/SDC?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
    username: SDC
    password: sdc123456
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss

kafka:
  ###########【Kafka集群】###########
  # 集群用逗号隔开
  #    bootstrap-servers: 36.131.1.66:19093,36.131.1.66:29093,36.131.1.66:39093
  bootstrap-servers: 36.138.2.28:19093,36.138.2.28:29093,36.138.2.28:39093
  ###########【初始化生产者配置】###########
  producer:
    # 重试次数,设置大于0的值，则客户端会将发送失败的记录重新发送
    retries: 3
    # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
    acks: all
    # 批量大小
    batch-size: 16384
    # 生产端缓冲区大小
    buffer-memory: 33554432
    # Kafka提供的序列化和反序列化类
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: org.apache.kafka.common.serialization.StringSerializer
    properties:
      sasl.mechanism: PLAIN
      security.protocol: SASL_PLAINTEXT
      sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username="cmq-access-point-pp8jhna0ox" password="3yjYNdFjgy";
#      sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username="cmq-access-point-36dqgwi4bm" password="PPgDfSRYhq";
  ###########【初始化消费者配置】###########
  consumer:
    # 提交offset延时(接收到消息后多久提交offset)
    auto-commit-interval: 1000
    # 当kafka中没有初始offset或offset超出范围时将自动重置offset
    # earliest:重置为分区中最小的offset;
    # latest:重置为分区中最新的offset(消费分区中新产生的数据);
    # none:只要有一个分区不存在已提交的offset,就抛出异常;
    auto-offset-reset: latest
    # 是否自动提交offset
    enable-auto-commit: false
    # Kafka提供的序列化和反序列化类
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    properties:
      sasl.mechanism: PLAIN
      security.protocol: SASL_PLAINTEXT
        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username="cmq-access-point-pp8jhna0ox" password="3yjYNdFjgy";
    #      sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username="cmq-access-point-36dqgwi4bm" password="PPgDfSRYhq";
    # 默认的消费组ID
    group-id: cms-sec-kf-consumer
    # 批量消费每次最多消费多少条消息
    max-poll-records: 50
  # 消费端监听的topic不存在时，项目启动会报错(关掉)
  listener:
    missing-topics-fatal: false

python:
  path:
    config: /DLXJS_DB.ini
    magnetic_global: /CMS-SDC-SEC/chaos_simulation/magnetic_global_V1.py   #全球磁场分布算法
    orbital_magnetic: /CMS-SDC-SEC/chaos_simulation/magnetic_orbit.py   #轨道磁场分布算法
    atmosphere_density: /CMS-SDC-SEC/atm_density/msis_simu.py  #大气密度算法
    single_event_effects: /tmp/yuechao/单粒子效应/seu/Single_events/seu_cal.py  #单粒子效应
    radiation_dose: /CMS-SDC-SEC/does_depth/SRAD/does_depth/does.py   #卫星辐射总剂量计算评估
    global_radiation_env: /CMS-SDC-SEC/particles_radiation_global/global_radiation/global_radiation.py   #全球辐射环境算法
    orbit_reduction: /CMS-SDC-SEC/orbit_reduction/orbit_reduction.py   #轨道衰变效应算法
    satellite_radiation_env: /CMS-SDC-SEC/SEC/pythonPlot/satellit_radiation_plot.py   #卫星辐射环境算法
    cross_anomaly: /CMS-SDC-SEC/SEC/AP8AE8/SatCrossSAATime/sat_cross_SAA_time.py   #穿越南大西洋异常区算法
    surface_charging: /CMS-SDC-SEC/sat_surface_charging/surface_charging.py   #卫星表面充电模块算法
    satellite_time: /CMS-SDC-SEC/sat_id_time_span/SAT_ID_TIME_SPAN.py   #确定卫星时间范围算法
    orbital_spectrum: /CMS-SDC-SEC/sat_flux_spectrum/sat_spectrum/sp.py   #卫星轨道能谱算法
    fault_diagnosis: /CMS-SDC-SEC/fault_diagnosis_parameter/M01_Model_Creation_release_V1.0.py   #故障诊断算法M1
    fault_diagnosis_m2: /CMS-SDC-SEC/fault_diagnosis_parameter/M02_Model_Prediction_V1.0.py   #故障诊断算法M2
    magnetic_global_v2: /CMS-SDC-SEC/chaos_simulation/magnetic_global_V2.py   #全球磁场内源场和外源场分布算法
    atmosphere_density_global: /CMS-SDC-SEC/atm_density/msis_simu_global.py  #全球大气密度算法
    in_charging: /CMS-SDC-SEC/sat_in_charging/in_charging/in_charging.py   #卫星深层充电模块算法
    satellite_radiation_env_orbit: /CMS-SDC-SEC/SEC/AP8AE8/satOrbitRad/sat_orbit_rad.py   #卫星沿轨道辐射环境算法
    satellite_radiation_env_orbit_plane: /CMS-SDC-SEC/SEC/pythonPlot/orbital_plane_plot.py   #卫星轨道面辐射环境算法
    s4_satellite: /CMS-SDC-SEC/s4_satellite/code/S4_new.py   #电波传播影响算法

picture:
  path:
    magnetic_global: /CMS-SDC-SEC/magnetic_global/     #全球磁场分布图片存储路径
    global_radiation_env: /CMS-SDC-SEC/particles_radiation_global/AP8AE8/     #全球辐射环境图片存储路径
    satellite_radiation_env: /CMS-SDC-SEC/SEC/AP8AE8/     #全球辐射环境图片存储路径
    magnetic_global_v2: /CMS-SDC-SEC/magnetic_global/v2/     #全球磁场内源场和外源场分布图片存储路径
    atmosphere_density_global: /CMS-SDC-SEC/atm_density/  #全球大气密度图片存储路径
  url:
    magnetic_global: /png/magnetic_global/             #全球磁场分布图片映射路径
    global_radiation_env: /png/global_radiation_env/             #全球辐射环境图片映射路径
    satellite_radiation_env: /png/satellite_radiation_env/             #全球辐射环境图片映射路径
    magnetic_global_v2: /png/magnetic_global/v2/             #全球磁场内源场和外源场分布图片映射路径
    atmosphere_density_global: /png/atm_density/  #全球大气密度图片映射路径

#python docker
remote:
  ip: 127.0.0.1
  port: 8026
  user_name: root
  password: 123456

#配置文件路径
piesat:
  profile: /CMS-SDC-SEC/
  weekPngPy: weekpng/analyse_t.py #周报算法图
  weekPngIni: DLXJS_DB.ini #周报算法数据库配置
  tecChinaPy: TEC/iri_tecChina.py # 全国站点二维算法脚本
  tecChina: TEC/china/ #TEC全国站点出图位置
  tecGlobalPy: TEC/iri_tecGlobal.py #TEC全球站点三维算法脚本
  tecGlobal: TEC/global/ #TEC全国站点出图位置
  rotiGlobalPy: ROTI/roti/code/satellite.py #ROTI算法脚本
  rotiPics: ROTI/china/ #ROTI算法结果存储位置
  rotiSatelliteData: ROTI/roti/Satellite_data/
  rotiEphemerisData: ROTI/roti/Ephemeris_data/
  s4FlickerIndexPy: S4/code/satellite.py # S4闪烁指数算法脚本
  s4DataPath: S4/data/ #闪烁指数数据所在位置

oss:
  type: s3

minio:
  endpoint: http://127.0.0.1:9000
  accesskey: minioadmin
  secretkey: minioadmin
  bucketName: htht

s3:
  endpoint: http://oss-cecstack.cqxw2q.cq2zone.xwcloud.com
  accesskey: 8wKxDQBwX9I7RjGHxNBS
  secretkey: QxyzkkaeGN7hfrRoYEBV2YrLyTZYCVvukygzPt7a
  bucketName: xzgl

logging:
  level:
    cn.piesat.sec: debug