spring:
  servlet:
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB
  mvc:
    servlet:
      path: /sec
    path-match:
      matching-strategy: ANT_PATH_MATCHER
  datasource:
    driverClassName: dm.jdbc.driver.DmDriver
    url: jdbc:dm://219.145.62.54:15236/SDC?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
#    url: jdbc:dm://127.0.0.1:5236/SDC?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
    username: SDC
    password: sdc123456
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
    
  kafka:
    ###########【Kafka集群】###########
    # 集群用逗号隔开
    bootstrap-servers: 192.168.31.218:9092
    ###########【初始化生产者配置】###########
    producer:
      # 重试次数,设置大于0的值，则客户端会将发送失败的记录重新发送
      retries: 3
      # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      acks: all
      # 批量大小
      batch-size: 16384
      # 生产端缓冲区大小
      buffer-memory: 33554432
      # Kafka提供的序列化和反序列化类
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    ###########【初始化消费者配置】###########
    consumer:
      # 提交offset延时(接收到消息后多久提交offset)
      auto-commit-interval: 1000
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
      # earliest:重置为分区中最小的offset;
      # latest:重置为分区中最新的offset(消费分区中新产生的数据);
      # none:只要有一个分区不存在已提交的offset,就抛出异常;
      auto-offset-reset: latest
      # 是否自动提交offset
      enable-auto-commit: false
      # Kafka提供的序列化和反序列化类
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 默认的消费组ID
      group-id: cms-sdc-mq-consumer
      # 批量消费每次最多消费多少条消息
      max-poll-records: 50
    # 消费端监听的topic不存在时，项目启动会报错(关掉)
    listener:
      missing-topics-fatal: false

python:
  path:
    config: /export/chaos_submit/xw.ini
    magnetic_global: /export/chaos_submit/magnetic_global.py   #全球磁场分布算法
    orbital_magnetic: /export/chaos_submit/magnetic_orbit.py   #轨道磁场分布算法
    atmosphere_density: /export/yuechao_cal/atm_density/msis_simu.py  #大气密度算法
    single_event_effects: /export/yuechao_cal/Single_events/seu_cal.py  #单粒子效应
    radiation_dose: /export/yuechao_cal/does_depth/does.py   #卫星辐射总剂量计算评估
    global_radiation_env: /export/yuechao_cal/SRAD/global_radiation/global_radiation.py   #全球辐射环境算法
    orbit_reduction: /export/yuechao_cal/orbit_reduction/orbit_reduction.py   #轨道衰变效应算法
    satellite_radiation_env: /export/SEC/pythonPlot/global_radiation_plot.py   #卫星辐射环境算法
    cross_anomaly: /export/SEC/AP8AE8/SatCrossSAATime/sat_cross_SAA_time.py   #穿越南大西洋异常区算法

picture:
  path:
    magnetic_global: /export/magnetic_global/     #全球磁场分布图片存储路径
    global_radiation_env: /export/yuechao_cal/SRAD/AP8AE8/     #全球辐射环境图片存储路径
    satellite_radiation_env: /export/SEC/AP8AE8/     #全球辐射环境图片存储路径
  url:
    magnetic_global: /png/magnetic_global/             #全球磁场分布图片映射路径
    global_radiation_env: /png/global_radiation_env/             #全球辐射环境图片映射路径
    satellite_radiation_env: /png/satellite_radiation_env/             #全球辐射环境图片映射路径

#python docker
remote:
  ip: 169.254.148.128
  port: 8026
  user_name: root
  password: 123456

#配置文件路径
piesat:
  profile: /secwin/
  weekPngPy: algorithm/weekpng/analyse_t.py #周报算法图
  weekPngIni: algorithm/weekpng/xw.ini #周报算法数据库配置
  tecStationPy: algorithm/stationtecpng/TEC_keshihua_03_png_creation.py # 全国站点二维算法脚本
  tecStations: TEC/stations/ #TEC全国站点出图位置
  tecGLStationPy: algorithm/tecpng/TEC/parameter_maps.py #TEC全球站点三维算法脚本
  rotiGLStationPy: algorithm/roti/ROTI/parameter_maps.py #TEC全球站点三维算法脚本
  tecTimes: TEC/time/ #TEC时间段绘图数据
  s4Stations: S4/stations/ #闪烁指数全国站点出图位置
  s4Times: S4/time/ #闪烁指数时间段绘图数据
  roti: ROTI/ #ROTI算法结果存储位置
  secondDir: maps/Medium/ # TEC、ROTI算法二级目录

oss:
  type: s3

minio:
  endpoint: http://127.0.0.1:9000
  accesskey: minioadmin
  secretkey: minioadmin
  bucketName: htht

s3:
  endpoint: http://127.0.0.1:9000
  accesskey: minioadmin
  secretkey: minioadmin
  bucketName: dlxjs

logging:
  level:
    cn.piesat.sec: debug



